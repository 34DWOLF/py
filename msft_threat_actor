import requests
import pandas as pd
import pycountry
from IPython.display import display

# Build a set of all country names (including common and official names)
country_set = {c.name for c in pycountry.countries}
country_set |= {c.common_name for c in pycountry.countries if hasattr(c, 'common_name')}
country_set |= {c.official_name for c in pycountry.countries if hasattr(c, 'official_name')}
# Normalize: strip whitespace
country_set = {name.strip() for name in country_set if name}

# URL for the raw JSON file
url = 'https://raw.githubusercontent.com/microsoft/mstic/master/PublicFeeds/ThreatActorNaming/MicrosoftMapping.json'

# Fetch and normalize
response = requests.get(url)
response.raise_for_status()
data = response.json()
raw_df = pd.json_normalize(data)

# Parse categories into list
raw_df['categories_list'] = (
    raw_df['Origin/Threat']
    .str.split(',')
    .apply(lambda cats: [c.strip() for c in cats if c.strip()])
)

# Identify primary nation-state from our full country list, or "None"
def find_country(tags):
    for tag in tags:
        if tag in country_set:
            return tag
    return "None"

raw_df['primary_nation_state'] = raw_df['categories_list'].apply(find_country)

# Other categories (excluding detected country)
raw_df['other_categories'] = (
    raw_df['categories_list']
    .apply(lambda tags: [t for t in tags if t not in country_set])
    .apply(lambda lst: ', '.join(lst))
)

# Join full categories for display
raw_df['categories'] = raw_df['categories_list'].apply(', '.join)

# Group summary
grouped_df = (
    raw_df
    .groupby('primary_nation_state', as_index=False)
    .agg(
        count=('Threat actor name', 'size'),
        associated_categories=('other_categories',
            lambda lists: ', '.join(sorted({cat 
                                             for sub in lists 
                                             for cat in (sub.split(', ') if sub else []) 
                                             if cat})))
    )
)

# Show results
display(raw_df.drop(columns=['categories_list']))
display(grouped_df)
