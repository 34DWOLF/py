import pandas as pd
from sklearn.linear_model import LinearRegression

# Create a DataFrame from the given data
data = []

df = pd.DataFrame(data, columns=['Date', 'Value', 'Category'])
df['Date'] = pd.to_datetime(df['Date'])

# Create lagged features
lagged_df = pd.DataFrame()
for i in range(1, 4):
    lagged_df[f'Lag_{i}'] = df.groupby('Category')['Value'].shift(i)

# Merge lagged features with the original DataFrame
df_with_lags = pd.concat([df, lagged_df], axis=1)

# Remove rows with missing values
df_with_lags = df_with_lags.dropna()

# Create features (X) and target (y)
X = df_with_lags[['Lag_1', 'Lag_2', 'Lag_3']]
y = df_with_lags['Value']

# Create and train the model
model = LinearRegression()
model.fit(X, y)

# Get the next date for prediction
next_date = df['Date'].max() + pd.Timedelta(days=1)

# Create a DataFrame to store the predicted values
predictions_df = pd.DataFrame(columns=['Date', 'Category', 'Value'])

# Predict the next value for each category
for category in df['Category'].unique():
    # Get the last 3 values for the category
    last_values = df[df['Category'] == category]['Value'].tail(3)
    
    # Create the input features for prediction
    input_features = last_values.values.reshape(1, -1)
    
    # Create a DataFrame with the input features and set the column names
    input_df = pd.DataFrame(input_features, columns=['Lag_1', 'Lag_2', 'Lag_3'])
    
    # Predict the next value
    next_value = model.predict(input_df)[0]
    
    # Append the predicted value to the predictions DataFrame
    predictions_df = pd.concat([predictions_df, pd.DataFrame({'Date': [next_date], 'Category': [category], 'Value': [next_value]})], ignore_index=True)

# Print the predictions DataFrame
print(predictions_df)
