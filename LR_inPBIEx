import pandas as pd
from sklearn.linear_model import LinearRegression

# Assume the incoming table is named 'dataset'
df = dataset
df['Date'] = pd.to_datetime(df['Date'])

# Create lagged features
lagged_df = pd.DataFrame()
for i in range(1, 4):
    lagged_df[f'Lag_{i}'] = df.groupby('Difficulty')['Rate'].shift(i)

# Merge lagged features with the original DataFrame
df_with_lags = pd.concat([df, lagged_df], axis=1)

# Remove rows with missing values
df_with_lags = df_with_lags.dropna()

# Create features (X) and target (y)
X = df_with_lags[['Lag_1', 'Lag_2', 'Lag_3']]
y = df_with_lags['Rate']

# Create and train the model
model = LinearRegression()
model.fit(X, y)

# Get the next date for prediction
next_date = df['Date'].max() + pd.Timedelta(days=1)

# Create a DataFrame to store the predicted values
predictions_df = pd.DataFrame(columns=['Date', 'Difficulty', 'Rate'])

# Predict the next value for each category
for difficulty in df['Difficulty'].unique():
    # Get the last 3 values for the difficulty
    last_values = df_with_lags[df_with_lags['Difficulty'] == difficulty][['Lag_1', 'Lag_2', 'Lag_3']].iloc[-1]
    
    # Create the input features for prediction
    input_features = last_values.values.reshape(1, -1)
    
    # Predict the next value
    next_value = model.predict(input_features)[0]
    
    # Create a new DataFrame with the predicted value
    new_row = pd.DataFrame({'Date': [next_date], 'Difficulty': [difficulty], 'Rate': [next_value]})
    
    # Filter out empty or all-NA columns before concatenation
    valid_columns = new_row.columns[new_row.notna().any()]
    new_row = new_row[valid_columns]
    
    # Concatenate the new row to the predictions DataFrame
    predictions_df = pd.concat([predictions_df, new_row], ignore_index=True)

# Rename the 'predictions_df' DataFrame to 'predicted_table'
predicted_table = predictions_df
