import requests
import re
import xml.etree.ElementTree as ET
import pandas as pd
from bs4 import BeautifulSoup
import os

# Configuration settings
RSS_FILE_PATH = "traveladvisory.xml"  # Path to the XML file
RSS_URL = "https://travel.state.gov/_res/rss/TAsTWs.xml"  # Default URL if needed

# SQL query placeholder for Mexico population data
# This query would be executed to retrieve state population and area data
MEXICO_POP_DATA_QUERY = """
SELECT 
    state_name AS State,
    population AS Population,
    area_km2 AS Area
FROM mexico_states
WHERE year = 2020
ORDER BY state_name
"""

def get_mexico_population_data():
    """
    Get Mexico population data from database.
    In a real implementation, this would execute the SQL query.
    For now, returns hardcoded data as a placeholder.
    """
    # This function would normally execute the SQL query
    # But for demonstration, we're using hardcoded data
    # In production, replace this with actual database connection code
    
    # Example: 
    # conn = create_database_connection()
    # df = pd.read_sql(MEXICO_POP_DATA_QUERY, conn)
    # conn.close()
    # return df
    
    # For now, return hardcoded data as a placeholder
    data = [
        ["Aguascalientes State", 1425607, 2168],
        ["Baja California State", 3769020, 27587],
        ["Baja California Sur State", 798447, 28537],
        ["Campeche State", 928363, 22195],
        ["Chiapas State", 5543828, 28306],
        ["Chihuahua State", 3741869, 95527],
        ["Mexico City", 9209944, 577],
        ["Coahuila State", 3146771, 58531],
        ["Colima State", 731391, 2173],
        ["Durango State", 1832650, 47631],
        ["Guanajuato State", 6166934, 11817],
        ["Guerrero State", 3540685, 24555],
        ["Hidalgo State", 3082841, 8039],
        ["Jalisco State", 8348151, 30346],
        ["Mexico State", 16992418, 8630],
        ["Michoacan State", 4748846, 22625],
        ["Morelos State", 1971520, 1884],
        ["Nayarit State", 1235456, 10756],
        ["Nuevo Leon State", 5784442, 24771],
        ["Oaxaca State", 4132148, 36200],
        ["Puebla State", 6583278, 13247],
        ["Queretaro State", 2368467, 4514],
        ["Quintana Roo State", 1857985, 17261],
        ["San Luis Potosi State", 2822255, 23606],
        ["Sinaloa State", 3026943, 22149],
        ["Sonora State", 2944840, 69249],
        ["Tabasco State", 2402598, 9549],
        ["Tamaulipas State", 3527735, 30984],
        ["Tlaxcala State", 1342977, 1543],
        ["Veracruz State", 8062579, 27731],
        ["Yucatan State", 2320898, 15261],
        ["Zacatecas State", 1622138, 29064]
    ]
    
    df = pd.DataFrame(data, columns=["State", "Population", "Area"])
    return df

def create_state_name_mappings(pop_data_df):
    """Create standardized state name mappings from population data DataFrame."""
    state_name_map = {}
    
    for state in pop_data_df["State"].tolist():
        # Handle each name format possibility for better matching
        base_name = state.replace(" State", "").lower()
        state_name_map[base_name] = state
        state_name_map[base_name + " state"] = state
        state_name_map[state.lower()] = state
    
    # Special cases
    state_name_map["mexico city"] = "Mexico City"
    state_name_map["ciudad de mexico"] = "Mexico City"
    state_name_map["cdmx"] = "Mexico City"
    state_name_map["mexico"] = "Mexico State"
    state_name_map["estado de mexico"] = "Mexico State"
    state_name_map["state of mexico"] = "Mexico State"
    
    return state_name_map

def read_xml_file(file_path):
    """Read XML content from a local file."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except Exception as e:
        print(f"Error reading XML file: {e}")
        return None

def fetch_travel_advisory_rss(rss_url):
    """Fetch travel advisory data from RSS feed URL."""
    try:
        response = requests.get(rss_url)
        response.raise_for_status()
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"Error fetching RSS feed: {e}")
        return None

def parse_mexico_states(summary_html, state_name_map):
    """Parse HTML summary for Mexico state advisories and assign threat levels."""
    results = []
    soup = BeautifulSoup(summary_html, "html.parser")
    paragraphs = soup.find_all("p")
    
    # Process special cases - Mexico City and Mexico State
    for p in paragraphs:
        text = p.get_text(strip=True)
        place = None
        level = None
        
        # Handle Mexico City
        if "mexico city" in text.lower():
            place = "Mexico City"
        # Handle Mexico State
        elif any(term in text.lower() for term in ["mexico state", "state of mexico", "estado de méxico"]):
            place = "Mexico State"
            
        if place:
            advisory_text = text.lower()
            if "do not travel" in advisory_text:
                level = "Level 4: Do Not Travel"
            elif "reconsider travel" in advisory_text:
                level = "Level 3: Reconsider Travel"
            elif "exercise increased caution" in advisory_text:
                level = "Level 2: Exercise Increased Caution"
                
            if level:
                results.append({"Place": place, "SecondaryThreatLevel": level})
    
    # Regular pattern for other states
    pattern = r"^([A-Za-z\s]+)(?:\s+(?:state|city))?\s*[–-]\s*(.+)$"
    for p in paragraphs:
        text = p.get_text(strip=True)
        m = re.match(pattern, text, re.I)
        if m:
            place_raw = m.group(1).strip()
            advisory_text = m.group(2).strip().lower()
            
            # Skip if already added Mexico City or Mexico
            if place_raw.lower() in ["mexico city", "mexico"]:
                continue
                
            # Standardize state name using mapping
            place_key = place_raw.lower()
            
            # If the parsed name doesn't end with "state" or "city", add "state" to match our mapping
            if not (place_key.endswith(" state") or place_key.endswith(" city")):
                place_key += " state"
                
            # Try to find standardized name in our mapping
            if place_key in state_name_map:
                place = state_name_map[place_key]
            else:
                # As a fallback, preserve the original name with State suffix
                place = place_raw + " State" if not place_raw.lower().endswith((" state", " city")) else place_raw
            
            level = None
            if "do not travel" in advisory_text:
                level = "Level 4: Do Not Travel"
            elif "reconsider travel" in advisory_text:
                level = "Level 3: Reconsider Travel"
            elif "exercise increased caution" in advisory_text:
                level = "Level 2: Exercise Increased Caution"
            
            if level:
                results.append({"Place": place, "SecondaryThreatLevel": level})
    
    return results

def process_mexico_advisory(xml_content, state_name_map, pop_data_df):
    """Process Mexico travel advisory data from XML content."""
    if not xml_content:
        return None
    
    try:
        # Parse the XML
        root = ET.fromstring(xml_content)
        channel = root.find('channel')
        if channel is None:
            print("Invalid RSS format: channel element not found.")
            return None
        
        # Find Mexico travel advisory
        mexico_item = None
        for item in channel.findall('item'):
            title = item.find('title')
            if title is not None and title.text and "mexico" in title.text.lower():
                mexico_item = item
                break
        
        if not mexico_item:
            print("No Mexico advisory found in the RSS feed.")
            return None
        
        # Extract country-level threat level from the file
        official_threat_level = "Level 3: Reconsider Travel"  # Default
        for category in mexico_item.findall('category'):
            if category.text and "level" in category.text.lower():
                official_threat_level = category.text.strip()
                break
        
        # Extract summary content
        desc_elem = mexico_item.find('description')
        summary = desc_elem.text if desc_elem is not None else ""
        
        # Extract state-level advisories
        state_advisories = parse_mexico_states(summary, state_name_map)
        
        # Create dataframe with state advisories
        if state_advisories:
            mexico_df = pd.DataFrame(state_advisories)
            mexico_df["Country"] = "Mexico"
            mexico_df["OfficialThreatLevel"] = official_threat_level
            
            # Add missing states with default threat level
            mexico_df = add_missing_states(mexico_df, official_threat_level, pop_data_df)
        else:
            # If no state data, create state entries with country-level threat
            mexico_df = create_default_state_advisories(official_threat_level, pop_data_df)
        
        return mexico_df
    
    except Exception as e:
        print(f"Error processing RSS feed: {e}")
        import traceback
        traceback.print_exc()
        return None

def add_missing_states(mexico_df, default_threat_level, pop_data_df):
    """Add missing states to the DataFrame with default threat level."""
    # Get list of states already in the DataFrame
    existing_states = set(mexico_df["Place"].tolist())
    
    # Find which states from our population data are missing
    missing_states = []
    for state_name in pop_data_df["State"].tolist():
        if state_name not in existing_states:
            missing_states.append({
                "Country": "Mexico",
                "Place": state_name,
                "SecondaryThreatLevel": default_threat_level,
                "OfficialThreatLevel": default_threat_level
            })
    
    # Add missing states to DataFrame if any
    if missing_states:
        missing_df = pd.DataFrame(missing_states)
        return pd.concat([mexico_df, missing_df], ignore_index=True)
    
    return mexico_df

def create_default_state_advisories(threat_level, pop_data_df):
    """Create default state advisories using country-level threat."""
    # Create a dataframe with all states and default threat level
    state_rows = []
    for _, row in pop_data_df.iterrows():
        state_name = row["State"]
        state_rows.append({
            "Country": "Mexico",
            "Place": state_name,
            "SecondaryThreatLevel": threat_level,
            "OfficialThreatLevel": threat_level,
            "Population": row["Population"],
            "Area": row["Area"]
        })
    
    return pd.DataFrame(state_rows)

def calculate_risk_metrics(mexico_df, pop_data_df):
    """Calculate risk metrics based on population and area data."""
    # Add population and area data if not already present
    if "Population" not in mexico_df.columns or "Area" not in mexico_df.columns:
        # Create a lookup dictionary from the population data DataFrame
        pop_lookup = {row["State"]: (row["Population"], row["Area"]) for _, row in pop_data_df.iterrows()}
        
        # Map population and area data to states
        mexico_df["Population"] = mexico_df["Place"].map(lambda x: pop_lookup.get(x, (0, 0))[0])
        mexico_df["Area"] = mexico_df["Place"].map(lambda x: pop_lookup.get(x, (0, 0))[1])
    
    # Calculate population and area totals
    pop_total = mexico_df["Population"].sum()
    area_total = mexico_df["Area"].sum()
    
    # Calculate percentages by risk level
    pop_pct = mexico_df.groupby("SecondaryThreatLevel")["Population"].sum() / pop_total
    area_pct = mexico_df.groupby("SecondaryThreatLevel")["Area"].sum() / area_total
    
    # Define risk levels and mapping
    risk_levels = ["Level 2: Exercise Increased Caution", 
                   "Level 3: Reconsider Travel", 
                   "Level 4: Do Not Travel"]
    risk_map = {"Level 2: Exercise Increased Caution": 2,
                "Level 3: Reconsider Travel": 3,
                "Level 4: Do Not Travel": 4}
    
    # Calculate composite risk (50% population, 50% area)
    composite = {}
    for r in risk_levels:
        pop_val = pop_pct.get(r, 0)
        area_val = area_pct.get(r, 0)
        composite[r] = 0.5 * pop_val + 0.5 * area_val
    
    # Determine total risk level
    if composite:
        max_comp = max(composite.values())
        candidates = [r for r, comp in composite.items() if comp == max_comp]
        calculated_risk = max(candidates, key=lambda r: risk_map[r]) if candidates else "Level 3: Reconsider Travel"
    else:
        calculated_risk = "Level 3: Reconsider Travel"
    
    # Add the calculated risk level to the DataFrame
    mexico_df["CalculatedThreatLevel"] = calculated_risk
    
    # Get the official threat level from the file (first value in the DataFrame)
    official_risk = mexico_df["OfficialThreatLevel"].iloc[0]
    
    # Create risk statistics
    risk_stats = {
        "population_percentages": pop_pct.to_dict(),
        "area_percentages": area_pct.to_dict(),
        "composite_percentages": composite,
        "calculated_risk_level": calculated_risk,
        "official_risk_level": official_risk
    }
    
    return mexico_df, risk_stats

def main():
    """Main function to process Mexico travel advisory data."""
    # Get population data that would normally come from SQL query
    pop_data_df = get_mexico_population_data()
    
    # Create state name mapping from population data
    state_name_map = create_state_name_mappings(pop_data_df)
    
    # Try to read from local file first
    xml_content = read_xml_file(RSS_FILE_PATH)
    
    # If local file not available, try to fetch from URL
    if not xml_content:
        print(f"Local file not found or invalid. Fetching from URL: {RSS_URL}")
        xml_content = fetch_travel_advisory_rss(RSS_URL)
    
    if not xml_content:
        print("Failed to obtain XML content. Please check file path or URL.")
        return None
        
    mexico_df = process_mexico_advisory(xml_content, state_name_map, pop_data_df)
    
    if mexico_df is not None:
        mexico_df, risk_stats = calculate_risk_metrics(mexico_df, pop_data_df)
        
        # Display results
        print("\n=== Mexico Travel Advisory Risk Analysis ===")
        print("\nPopulation Percentage by Risk Level:")
        for level, pct in risk_stats["population_percentages"].items():
            print(f"  {level}: {pct:.2%}")
        
        print("\nArea Percentage by Risk Level:")
        for level, pct in risk_stats["area_percentages"].items():
            print(f"  {level}: {pct:.2%}")
        
        print("\nComposite Risk (50% population, 50% area):")
        for level, pct in risk_stats["composite_percentages"].items():
            print(f"  {level}: {pct:.2%}")
        
        print(f"\nRisk Level Comparison:")
        print(f"  Official Risk Level (from RSS feed): {risk_stats['official_risk_level']}")
        print(f"  Calculated Risk Level (population/area weighted): {risk_stats['calculated_risk_level']}")
        
        # Show difference if there is one
        if risk_stats['official_risk_level'] != risk_stats['calculated_risk_level']:
            print(f"\n  NOTE: The calculated risk level differs from the official advisory.")
            print(f"        This suggests the state-level risks may be weighted differently")
            print(f"        in the official assessment than our area/population method.")
        
        print("\n=== State-level Advisories (Sample) ===")
        print(mexico_df[["Place", "SecondaryThreatLevel", "Population", "Area", 
                         "OfficialThreatLevel", "CalculatedThreatLevel"]].head(5))
        print(f"Total states: {len(mexico_df)}")
        print(f"Unique places: {mexico_df['Place'].nunique()}")
        
        return mexico_df
    else:
        print("Failed to process Mexico travel advisory data.")
        return None

if __name__ == "__main__":
    main()
