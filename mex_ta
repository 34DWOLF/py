import os
import re
import xml.etree.ElementTree as ET
import pandas as pd
from bs4 import BeautifulSoup
import feedparser
from typing import Dict, List, Tuple, Any

def extract_reason(text, state_name=""):
    """
    Extract the reason for a travel advisory from the text.
    
    Args:
        text (str): The advisory text to extract from
        state_name (str): The name of the place (state/city) to look for
        
    Returns:
        str: The extracted reason
    """
    # Look for explicit reason patterns
    reason_patterns = [
        r"due to\s+([^\.]+)",
        r"because of\s+([^\.]+)",
        r"as a result of\s+([^\.]+)"
    ]
    
    for pattern in reason_patterns:
        match = re.search(pattern, text, re.I)
        if match:
            reason_text = match.group(1).strip()
            return reason_text
    
    # Common reason keywords as fallback
    common_reasons = ["crime", "kidnapping", "cartel", "violence"]
    found_reasons = []
    for reason in common_reasons:
        if reason in text.lower():
            found_reasons.append(reason)
    
    if found_reasons:
        return " and ".join(found_reasons)
    
    return ""  # Return empty string if no reason found

def parse_mexico_states(summary_html):
    """
    Parse HTML content for Mexico state advisories.
    Returns list of dictionaries with Place, SecondaryThreatLevel, and Reason.
    """
    if not summary_html:
        return []
        
    results = []
    try:
        soup = BeautifulSoup(summary_html, "html.parser")
        paragraphs = soup.find_all("p")
        
        for p in paragraphs:
            text = p.get_text(strip=True)
            
            # Pattern for state name followed by advisory text
            state_pattern = r"^([A-Za-z\s]+)(?:\s+(?:state|city))?\s*[â€“-]\s*(.+)$"
            match = re.match(state_pattern, text, re.I)
            
            if match:
                place = match.group(1).strip()
                advisory_text = match.group(2).strip()
                
                # Handle special cases
                if place.lower() == "mexico city":
                    place = "Mexico City"
                elif place.lower() == "mexico" and "state" in place.lower():
                    place = "Mexico State"
                elif not place.lower().endswith("state") and place.lower() != "mexico city":
                    place = f"{place} State"
                
                # Determine threat level
                level = None
                if "do not travel" in advisory_text.lower():
                    level = "Level 4: Do Not Travel"
                elif "reconsider travel" in advisory_text.lower():
                    level = "Level 3: Reconsider Travel"
                elif "exercise increased caution" in advisory_text.lower():
                    level = "Level 2: Exercise Increased Caution"
                elif "exercise normal precautions" in advisory_text.lower():
                    level = "Level 1: Exercise Normal Precautions"
                
                if level:
                    # Extract reason directly from the advisory text
                    reason = extract_reason(advisory_text)
                    
                    results.append({
                        "Place": place,
                        "SecondaryThreatLevel": level,
                        "Reason": reason
                    })
            
            # Special case for paragraphs that mention Mexico City or Mexico State
            # but don't follow the standard pattern
            elif "mexico city" in text.lower() and any(term in text.lower() for term in 
                  ["do not travel", "reconsider travel", "exercise increased caution"]):
                level = None
                if "do not travel" in text.lower():
                    level = "Level 4: Do Not Travel"
                elif "reconsider travel" in text.lower():
                    level = "Level 3: Reconsider Travel"
                elif "exercise increased caution" in text.lower():
                    level = "Level 2: Exercise Increased Caution"
                
                if level:
                    reason = extract_reason(text)
                    results.append({
                        "Place": "Mexico City",
                        "SecondaryThreatLevel": level,
                        "Reason": reason
                    })
            
            elif ("mexico state" in text.lower() or "state of mexico" in text.lower()) and any(term in text.lower() for term in 
                  ["do not travel", "reconsider travel", "exercise increased caution"]):
                level = None
                if "do not travel" in text.lower():
                    level = "Level 4: Do Not Travel"
                elif "reconsider travel" in text.lower():
                    level = "Level 3: Reconsider Travel"
                elif "exercise increased caution" in text.lower():
                    level = "Level 2: Exercise Increased Caution"
                
                if level:
                    reason = extract_reason(text)
                    results.append({
                        "Place": "Mexico State",
                        "SecondaryThreatLevel": level,
                        "Reason": reason
                    })
        
        # Print first few results for debugging
        print("\nExtracted state advisories:")
        for item in results[:5]:  # Show first 5 for debugging
            print(f"{item['Place']}: {item['SecondaryThreatLevel']} - {item['Reason']}")
            
        return results
    except Exception as e:
        print(f"Error parsing state data: {e}")
        return []

def process_travel_advisory_rss(file_path):
    """
    Process travel advisory data from RSS file, focusing on Mexico.
    
    Args:
        file_path: Path to the RSS feed file
        
    Returns:
        Tuple: (country_df, state_df) - DataFrames for country and state level data
    """
    print(f"Processing travel advisory data from: {file_path}")
    
    try:
        # Parse the RSS feed
        with open(file_path, 'r', encoding='utf-8') as f:
            feed_content = f.read()
        
        feed = feedparser.parse(feed_content)
        
        # Look for Mexico entry
        mexico_data = None
        mexico_summary = None
        
        for entry in feed.entries:
            if "Mexico" in entry.title and "Travel Advisory" in entry.title:
                # Extract threat level from title
                threat_match = re.search(r'Level (\d+):', entry.title)
                threat_level = f"Level {threat_match.group(1)}" if threat_match else ""
                
                if hasattr(entry, 'description') or hasattr(entry, 'summary'):
                    summary = entry.description if hasattr(entry, 'description') else entry.summary
                    
                    # Store Mexico data
                    mexico_data = {
                        "Country": "Mexico",
                        "ThreatLevel": threat_level,
                        "Summary": summary
                    }
                    mexico_summary = summary
                    print(f"Found Mexico data with threat level: {threat_level}")
                    break
        
        if mexico_data:
            # Create country-level dataframe
            mexico_df = pd.DataFrame([mexico_data])
            
            # Extract state-level data from summary
            state_data = parse_mexico_states(mexico_summary)
            
            if state_data:
                # Create state-level dataframe
                state_rows = []
                for item in state_data:
                    state_rows.append({
                        "Country": "Mexico",
                        "Place": item["Place"],
                        "SecondaryThreatLevel": item["SecondaryThreatLevel"],
                        "Reason": item["Reason"],
                        "ThreatLevel": mexico_data["ThreatLevel"]
                    })
                mexico_state_df = pd.DataFrame(state_rows)
                return mexico_df, mexico_state_df
            else:
                print("No state-level data found in the Mexico advisory.")
                return mexico_df, None
        else:
            # Fallback to regular XML parsing if feedparser doesn't work
            return process_xml_fallback(file_path)
            
    except Exception as e:
        print(f"Error processing RSS: {str(e)}")
        print("Falling back to XML parsing...")
        return process_xml_fallback(file_path)

def process_xml_fallback(file_path):
    """Fallback method using direct XML parsing if RSS parsing fails"""
    try:
        # Parse the XML file
        tree = ET.parse(file_path)
        root = tree.getroot()
        
        # Try to find Mexico entry in different XML formats
        mexico_entry = None
        mexico_threat = None
        mexico_summary = None
        
        # Check for <item> tags (RSS format)
        for item in root.findall('.//item'):
            title_elem = item.find('./title')
            if title_elem is not None and "Mexico" in title_elem.text:
                description_elem = item.find('./description')
                if description_elem is not None:
                    mexico_entry = item
                    mexico_summary = description_elem.text
                    
                    # Try to extract threat level from title
                    threat_match = re.search(r'Level (\d+):', title_elem.text)
                    if threat_match:
                        mexico_threat = f"Level {threat_match.group(1)}"
                    break
        
        # If not found, check for <entry> tags (Atom format)
        if mexico_entry is None:
            for entry in root.findall('.//{http://www.w3.org/2005/Atom}entry'):
                title_elem = entry.find('.//{http://www.w3.org/2005/Atom}title')
                if title_elem is not None and "Mexico" in title_elem.text:
                    summary_elem = entry.find('.//{http://www.w3.org/2005/Atom}summary')
                    if summary_elem is not None:
                        mexico_entry = entry
                        mexico_summary = summary_elem.text
                        
                        # Try to find threat level in category
                        for cat in entry.findall('.//{http://www.w3.org/2005/Atom}category'):
                            if cat.get('label') == 'Threat-Level':
                                mexico_threat = cat.get('term')
                                if mexico_threat and "Level" in mexico_threat:
                                    level_match = re.search(r'Level (\d+)', mexico_threat)
                                    if level_match:
                                        mexico_threat = f"Level {level_match.group(1)}"
                        break
        
        if mexico_entry is not None and mexico_summary is not None:
            # Create country dataframe
            mexico_df = pd.DataFrame([{
                "Country": "Mexico",
                "ThreatLevel": mexico_threat or "",
                "Summary": mexico_summary
            }])
            
            # Extract state data
            state_data = parse_mexico_states(mexico_summary)
            if state_data:
                # Create state dataframe
                state_rows = []
                for item in state_data:
                    state_rows.append({
                        "Country": "Mexico",
                        "Place": item["Place"],
                        "SecondaryThreatLevel": item["SecondaryThreatLevel"],
                        "Reason": item["Reason"],
                        "ThreatLevel": mexico_threat or ""
                    })
                mexico_state_df = pd.DataFrame(state_rows)
                return mexico_df, mexico_state_df
            else:
                return mexico_df, None
        else:
            print("Mexico entry not found in XML.")
            return None, None
            
    except Exception as e:
        print(f"Error in XML fallback: {str(e)}")
        import traceback
        traceback.print_exc()
        return None, None

def main():
    """Main function to process travel advisory data and return integrated DataFrame."""
    # Define file path
    file_path = file_path
    
    # Mexico population data with "State" added to names
    pop_data = [
        [2020, "Aguascalientes State", 1425607, 2168],
        [2020, "Baja California State", 3769020, 27587],
        [2020, "Baja California Sur State", 798447, 28537],
        [2020, "Campeche State", 928363, 22195],
        [2020, "Chiapas State", 5543828, 28306],
        [2020, "Chihuahua State", 3741869, 95527],
        [2020, "Mexico City", 9209944, 577],
        [2020, "Coahuila State", 3146771, 58531],
        [2020, "Colima State", 731391, 2173],
        [2020, "Durango State", 1832650, 47631],
        [2020, "Guanajuato State", 6166934, 11817],
        [2020, "Guerrero State", 3540685, 24555],
        [2020, "Hidalgo State", 3082841, 8039],
        [2020, "Jalisco State", 8348151, 30346],
        [2020, "Mexico State", 16992418, 8630],
        [2020, "Michoacan State", 4748846, 22625],
        [2020, "Morelos State", 1971520, 1884],
        [2020, "Nayarit State", 1235456, 10756],
        [2020, "Nuevo Leon State", 5784442, 24771],
        [2020, "Oaxaca State", 4132148, 36200],
        [2020, "Puebla State", 6583278, 13247],
        [2020, "Queretaro State", 2368467, 4514],
        [2020, "Quintana Roo State", 1857985, 17261],
        [2020, "San Luis Potosi State", 2822255, 23606],
        [2020, "Sinaloa State", 3026943, 22149],
        [2020, "Sonora State", 2944840, 69249],
        [2020, "Tabasco State", 2402598, 9549],
        [2020, "Tamaulipas State", 3527735, 30984],
        [2020, "Tlaxcala State", 1342977, 1543],
        [2020, "Veracruz State", 8062579, 27731],
        [2020, "Yucatan State", 2320898, 15261],
        [2020, "Zacatecas State", 1622138, 29064]
    ]
    
    # Process travel advisory data using RSS parser first
    mexico_df, mexico_state_df = process_travel_advisory_rss(file_path)
    
    # Manual extraction as last resort if all parsing fails
    if mexico_df is None:
        print("Attempting manual regex extraction...")
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Look for Mexico entry with regex
            mexico_match = re.search(r'<item>.*?Mexico.*?</item>|<entry>.*?Mexico.*?</entry>', content, re.DOTALL)
            if mexico_match:
                entry_text = mexico_match.group(0)
                
                # Extract threat level and description
                threat_match = re.search(r'Level (\d+)', entry_text)
                summary_match = re.search(r'<description>(.*?)</description>|<summary.*?>(.*?)</summary>', entry_text, re.DOTALL)
                
                if threat_match and summary_match:
                    threat_level = f"Level {threat_match.group(1)}"
                    summary = summary_match.group(1) or summary_match.group(2)
                    
                    # Create dataframes
                    mexico_df = pd.DataFrame([{
                        "Country": "Mexico",
                        "ThreatLevel": threat_level,
                        "Summary": summary
                    }])
                    
                    # Extract state-level data
                    state_data = parse_mexico_states(summary)
                    if state_data:
                        state_rows = []
                        for item in state_data:
                            state_rows.append({
                                "Country": "Mexico",
                                "Place": item["Place"],
                                "SecondaryThreatLevel": item["SecondaryThreatLevel"],
                                "Reason": item["Reason"],
                                "ThreatLevel": threat_level
                            })
                        mexico_state_df = pd.DataFrame(state_rows)
        except Exception as e:
            print(f"Error during manual extraction: {e}")
    
    # Create base dataframe with population data
    state_rows = []
    for row in pop_data:
        threat_level = ""
        if mexico_df is not None and not mexico_df.empty and "ThreatLevel" in mexico_df.columns:
            threat_level = mexico_df["ThreatLevel"].iloc[0]
            
        state_rows.append({
            "State": row[1],
            "Population": row[2],
            "Area": row[3],
            "SecondaryThreatLevel": "See State Summaries",
            "Reason": "",
            "ThreatLevel": threat_level
        })
    
    base_df = pd.DataFrame(state_rows)
    
    # Update with state-specific data if available
    if mexico_state_df is not None and not mexico_state_df.empty:
        for idx, row in mexico_state_df.iterrows():
            place = row["Place"]
            mask = base_df["State"] == place
            if mask.any():
                base_df.loc[mask, "SecondaryThreatLevel"] = row["SecondaryThreatLevel"]
                base_df.loc[mask, "Reason"] = row["Reason"]
    
    # Display results
    print("\n=== Mexico Country-Level Advisory ===")
    if mexico_df is not None and not mexico_df.empty:
        print(mexico_df[["Country", "ThreatLevel"]].iloc[0])
    
    print("\n=== Mexico State-Level Data ===")
    print(f"Total states: {len(base_df)}")
    print(base_df[["State", "SecondaryThreatLevel", "Reason"]].head(10))
    
    # Create the final DataFrame for other code blocks
    from IPython.display import display
    print("\n=== Full Integrated Mexico DataFrame ===")
    display(base_df)
    
    return base_df

if __name__ == "__main__":
    main()
