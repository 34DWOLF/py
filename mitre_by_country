import pandas as pd
import requests
import json
import spacy
from spacy.training import Example
from spacy.util import minibatch, compounding
import random
import re
import warnings
warnings.filterwarnings('ignore')

def fetch_mitre_attack_data():
    """
    Fetch MITRE ATT&CK data from GitHub
    """
    print("Fetching MITRE ATT&CK data...")
    
    # MITRE ATT&CK STIX data URL
    url = "https://raw.githubusercontent.com/mitre/cti/master/enterprise-attack/enterprise-attack.json"
    
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        
        # Extract threat actors (intrusion-sets)
        threat_actors = []
        for obj in data['objects']:
            if obj['type'] == 'intrusion-set':
                actor_info = {
                    'Name': obj.get('name', ''),
                    'Description': obj.get('description', ''),
                    'Aliases': obj.get('aliases', []),
                    'Created': obj.get('created', ''),
                    'Modified': obj.get('modified', '')
                }
                threat_actors.append(actor_info)
        
        mitre_df = pd.DataFrame(threat_actors)
        print(f"Successfully fetched {len(mitre_df)} threat actors from MITRE ATT&CK")
        return mitre_df
    
    except Exception as e:
        print(f"Error fetching MITRE data: {e}")
        return pd.DataFrame()

def match_threat_actors(result_df, raw_df):
    """
    Match MITRE threat actors with raw_df based on threat actor names
    Only processes entries that don't already have a nation state
    """
    print("\nMatching remaining threat actors with raw_df...")
    
    # Normalize names for better matching
    def normalize_name(name):
        if pd.isna(name):
            return ''
        # Remove special characters and extra spaces
        name = str(name).strip().lower()
        name = re.sub(r'[^\w\s-]', '', name)
        return name
    
    # Create normalized columns for matching
    result_df['name_normalized'] = result_df['Name'].apply(normalize_name)
    raw_df['threat_actor_normalized'] = raw_df['Threat actor name'].apply(normalize_name)
    
    # Only process entries without nation states
    no_nation_mask = result_df['primary_nation_state'] == ''
    matched_count = 0
    
    for idx in result_df[no_nation_mask].index:
        mitre_name = result_df.at[idx, 'name_normalized']
        
        # Check direct match
        match = raw_df[raw_df['threat_actor_normalized'] == mitre_name]
        if not match.empty:
            nation = match.iloc[0]['primary_nation_state']
            if pd.notna(nation) and nation.strip():
                result_df.at[idx, 'primary_nation_state'] = nation
                result_df.at[idx, 'match_source'] = 'threat_actors_exact'
                matched_count += 1
                continue
        
        # Check if MITRE name is in raw_df threat actor name (partial match)
        for _, raw_row in raw_df.iterrows():
            if mitre_name and (mitre_name in raw_row['threat_actor_normalized'] or \
               raw_row['threat_actor_normalized'] in mitre_name):
                nation = raw_row['primary_nation_state']
                if pd.notna(nation) and nation.strip():
                    result_df.at[idx, 'primary_nation_state'] = nation
                    result_df.at[idx, 'match_source'] = 'threat_actors_partial'
                    matched_count += 1
                    break
        
        # Check aliases
        if result_df.at[idx, 'primary_nation_state'] == '':
            aliases = result_df.at[idx, 'Aliases']
            if isinstance(aliases, list):
                for alias in aliases:
                    alias_normalized = normalize_name(alias)
                    match = raw_df[raw_df['threat_actor_normalized'] == alias_normalized]
                    if not match.empty:
                        nation = match.iloc[0]['primary_nation_state']
                        if pd.notna(nation) and nation.strip():
                            result_df.at[idx, 'primary_nation_state'] = nation
                            result_df.at[idx, 'match_source'] = 'threat_actors_alias'
                            matched_count += 1
                            break
    
    # Clean up temporary columns
    result_df = result_df.drop(['name_normalized'], axis=1)
    
    print(f"Matched {matched_count} additional threat actors from raw_df")
    
    return result_df

def extract_nation_states_from_text(text):
    """
    Extract nation states from text using pattern matching
    """
    if not text or pd.isna(text):
        return ''
    
    text = str(text)
    
    # Define nation patterns with variations
    nation_patterns = {
        'Russia': [r'\bRussia\b', r'\bRussian\b', r'\bRussian Federation\b', r'\bUSSR\b', r'\bSoviet\b'],
        'China': [r'\bChina\b', r'\bChinese\b', r'\bPRC\b', r"\bPeople's Republic of China\b"],
        'Iran': [r'\bIran\b', r'\bIranian\b', r'\bPersia\b', r'\bPersian\b'],
        'North Korea': [r'\bNorth Korea\b', r'\bNorth Korean\b', r'\bDPRK\b'],
        'United States': [r'\bUnited States\b', r'\bAmerican\b', r'\bUSA\b', r'\bUS\b', r'\bU\.S\.\b'],
        'Israel': [r'\bIsrael\b', r'\bIsraeli\b'],
        'India': [r'\bIndia\b', r'\bIndian\b'],
        'Pakistan': [r'\bPakistan\b', r'\bPakistani\b'],
        'Vietnam': [r'\bVietnam\b', r'\bVietnamese\b'],
        'Lebanon': [r'\bLebanon\b', r'\bLebanese\b'],
        'Syria': [r'\bSyria\b', r'\bSyrian\b'],
        'Ukraine': [r'\bUkraine\b', r'\bUkrainian\b'],
        'Belarus': [r'\bBelarus\b', r'\bBelarusian\b'],
        'South Korea': [r'\bSouth Korea\b', r'\bSouth Korean\b', r'\bROK\b', r'\bRepublic of Korea\b'],
        'United Kingdom': [r'\bUnited Kingdom\b', r'\bUK\b', r'\bBritish\b', r'\bBritain\b'],
        'France': [r'\bFrance\b', r'\bFrench\b'],
        'Germany': [r'\bGermany\b', r'\bGerman\b'],
        'Turkey': [r'\bTurkey\b', r'\bTurkish\b', r'\bTÃ¼rkiye\b'],
        'Saudi Arabia': [r'\bSaudi Arabia\b', r'\bSaudi\b'],
        'UAE': [r'\bUAE\b', r'\bUnited Arab Emirates\b', r'\bEmirati\b'],
    }
    
    # Check each nation pattern
    for nation, patterns in nation_patterns.items():
        for pattern in patterns:
            if re.search(pattern, text, re.IGNORECASE):
                return nation
    
    return ''

def extract_nation_states_from_descriptions(mitre_df):
    """
    Extract nation states from MITRE descriptions using pattern matching
    """
    print("\nExtracting nation states from MITRE descriptions...")
    
    # Create a copy to store results
    result_df = mitre_df.copy()
    result_df['primary_nation_state'] = ''
    result_df['match_source'] = ''
    
    extracted_count = 0
    
    for idx, row in result_df.iterrows():
        # Combine name, description and aliases for context
        name = row['Name']
        description = row['Description']
        aliases = row['Aliases']
        
        # Create text for analysis
        text_parts = []
        if name:
            text_parts.append(str(name))
        if description:
            text_parts.append(str(description))  # Use full description
        if isinstance(aliases, list) and aliases:
            text_parts.extend([str(alias) for alias in aliases])
        
        combined_text = ' '.join(text_parts)
        
        # Extract nation state
        nation = extract_nation_states_from_text(combined_text)
        
        if nation:
            result_df.at[idx, 'primary_nation_state'] = nation
            result_df.at[idx, 'match_source'] = 'text_extraction'
            extracted_count += 1
    
    print(f"Extracted nation states for {extracted_count} entries from descriptions")
    return result_df

def main(raw_df, df_spacy_train=None):
    """
    Main function to orchestrate the entire process
    """
    print("Starting MITRE ATT&CK threat actor matching process...")
    
    # Step 1: Fetch MITRE ATT&CK data
    mitre_df = fetch_mitre_attack_data()
    if mitre_df.empty:
        print("Failed to fetch MITRE data. Exiting.")
        return pd.DataFrame()
    
    # Step 2: First extract nation states from MITRE descriptions
    result_df = extract_nation_states_from_descriptions(mitre_df)
    
    # Step 3: Then match with raw_df (only for those without nation states)
    final_df = match_threat_actors(result_df, raw_df)
    
    # Summary statistics
    print("\n=== Summary ===")
    print(f"Total threat actors: {len(final_df)}")
    print(f"Matched nation states: {(final_df['primary_nation_state'] != '').sum()}")
    print(f"Blank nation states: {(final_df['primary_nation_state'] == '').sum()}")
    
    # Print breakdown by source
    print("\n=== Match Source Breakdown ===")
    source_counts = final_df['match_source'].value_counts()
    for source, count in source_counts.items():
        if source:
            print(f"{source}: {count}")
    
    # Print all results with full details
    print("\n=== Full Results ===")
    # Prepare display dataframe
    display_df = final_df[['Name', 'primary_nation_state', 'match_source', 'Description']].copy()
    display_df['primary_nation_state'] = display_df['primary_nation_state'].fillna('')
    display_df['match_source'] = display_df['match_source'].fillna('')
    
    # Truncate description for display
    display_df['Description'] = display_df['Description'].apply(
        lambda x: (str(x)[:100] + '...') if pd.notna(x) and len(str(x)) > 100 else str(x)
    )
    
    # Set pandas display options for better output
    pd.set_option('display.max_rows', None)
    pd.set_option('display.max_columns', None)
    pd.set_option('display.width', None)
    pd.set_option('display.max_colwidth', None)
    
    print(display_df.to_string(index=False))
    
    # Reset display options
    pd.reset_option('display.max_rows')
    pd.reset_option('display.max_columns')
    pd.reset_option('display.width')
    pd.reset_option('display.max_colwidth')
    
    return final_df

# Run the script with raw_df from previous code block
if __name__ == "__main__":
    # raw_df is already available from previous code block
    # Run the main function - this will print all results
    result_df = main(raw_df)
