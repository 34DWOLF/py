# Create a summary DataFrame with key forecast information
summary_data = []

for owner in all_owners:
    # Get forecast data
    forecast = forecast_results[owner]['forecast']
    model_type = forecast_results[owner]['model_type']
    
    # Get metrics
    if "ARIMA" in model_type:
        metrics = arima_results[owner]['metrics']
    else:
        metrics = linear_results[owner]['metrics']
    
    # Get original data
    owner_data = df[df['Owner'] == owner]
    last_value = owner_data['Value'].iloc[-1]
    
    # Get key forecast values
    forecast_first = forecast[0]  # First month forecast
    forecast_last = forecast[-1]  # Last month forecast
    
    # Calculate percentage changes
    pct_change_first = ((forecast_first - last_value) / last_value) * 100 if last_value != 0 else np.nan
    pct_change_last = ((forecast_last - last_value) / last_value) * 100 if last_value != 0 else np.nan
    
    # Create summary entry
    summary_data.append({
        'Owner': owner,
        'Model': model_type,
        'R-squared': round(metrics['r2'], 3),
        'RMSE': round(metrics['rmse'], 3),
        'Last Value': round(last_value, 2),
        'First Month Forecast': round(forecast_first, 2),
        'Last Month Forecast': round(forecast_last, 2),
        'Pct Change (First Month)': round(pct_change_first, 2),
        'Pct Change (Forecast Period)': round(pct_change_last, 2)
    })

# Create DataFrame
summary_df = pd.DataFrame(summary_data)

# Display the summary DataFrame
display(summary_df)


# Create a detailed forecast DataFrame with month-by-month predictions
detailed_forecast_data = []

for owner in all_owners:
    # Get forecast data
    forecasts = forecast_results[owner]['forecast']
    future_dates = forecast_results[owner]['future_dates']
    model_type = forecast_results[owner]['model_type']
    
    # Add each month's forecast
    for i, (date, value) in enumerate(zip(future_dates, forecasts)):
        detailed_forecast_data.append({
            'Owner': owner,
            'Month': date.strftime('%Y-%m'),
            'Model': model_type,
            'Forecast Value': round(value, 2)
        })

# Create DataFrame
detailed_forecast_df = pd.DataFrame(detailed_forecast_data)

# Display the detailed forecast DataFrame
display(detailed_forecast_df)

