# MLflow Model Registration and Tracking
import mlflow
import mlflow.sklearn
import mlflow.statsmodels
import pickle
import json
import os
from datetime import datetime

# This code block assumes model_metadata is available from the previous code block
# If model_metadata is not available, you can load it from a saved file or rerun the model training

# ====================================================
# MLflow PARAMETER SECTION - Modify these values as needed
# ====================================================
# MLflow tracking parameters
experiment_name = "Owner_Value_Forecasting"  # Change to your experiment name
run_name_prefix = "Monthly_Forecast_"        # Will be appended with date and owner
model_prefix = "owner_forecast_"             # Will be appended with owner name
model_stage = "Production"                   # Options: "None", "Staging", "Production", "Archived"

# Set this to the Model Registry URI (if using remote registry)
model_registry_uri = None  # Example: "databricks" or "http://your-mlflow-server:5000"

# Additional run tags
run_tags = {
    "model_type": "time_series",
    "data_frequency": "monthly",
    "forecast_horizon": f"{FORECAST_MONTHS}_months",
    "reconciliation_method": RECONCILIATION_METHOD if is_total_present else "none"
}

# Model details (for documentation)
model_details = {
    "description": "Monthly value forecasting by owner", 
    "min_months_for_arima": MIN_MONTHS_FOR_ARIMA,
    "forecast_months": FORECAST_MONTHS,
    "confidence_level": CONFIDENCE_LEVEL,
    "created_by": "Forecast_Pipeline_v1.0"
}
# ====================================================

# Set MLflow tracking URI if provided
if model_registry_uri:
    mlflow.set_tracking_uri(model_registry_uri)
    print(f"MLflow tracking URI set to: {model_registry_uri}")

# Create or get the experiment
try:
    experiment_id = mlflow.create_experiment(experiment_name)
    print(f"Created new experiment: {experiment_name} with ID: {experiment_id}")
except Exception:
    experiment_id = mlflow.get_experiment_by_name(experiment_name).experiment_id
    print(f"Using existing experiment: {experiment_name} with ID: {experiment_id}")

mlflow.set_experiment(experiment_name)

# Function to register a model in MLflow
def register_model(owner, metadata, artifact_path):
    try:
        # Register the model
        model_name = f"{model_prefix}{owner.replace(' ', '_').lower()}"
        registered_model = mlflow.register_model(
            f"runs:/{run_id}/{artifact_path}",
            model_name
        )
        
        # Transition the model to the specified stage
        client = mlflow.tracking.MlflowClient()
        client.transition_model_version_stage(
            name=model_name,
            version=registered_model.version,
            stage=model_stage
        )
        
        # Add model description and details
        client.update_model_version(
            name=model_name,
            version=registered_model.version,
            description=json.dumps(model_details)
        )
        
        print(f"Model for owner '{owner}' registered as '{model_name}' " +
              f"version {registered_model.version} in stage '{model_stage}'")
        
        return registered_model
    except Exception as e:
        print(f"Error registering model for {owner}: {str(e)}")
        return None

# Log each model in a separate MLflow run
registered_models = {}

for owner, metadata in model_metadata.items():
    model_fit = metadata['model_fit']
    model_type = metadata['model_type']
    framework = metadata['framework']
    params = metadata['params']
    
    # Add reconciliation info to tags for non-Total owners
    owner_tags = run_tags.copy()
    if is_total_present and owner != "Total":
        owner_tags["reconciled"] = "true"
    elif owner == "Total":
        owner_tags["is_total"] = "true"
    
    # Start a new MLflow run for this owner
    run_name = f"{run_name_prefix}{owner.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    with mlflow.start_run(run_name=run_name) as run:
        run_id = run.info.run_id
        print(f"Started MLflow run: {run_name} with ID: {run_id}")
        
        # Log parameters
        mlflow.log_params({
            "owner": owner,
            "model_type": model_type,
            "framework": framework,
            "min_months_for_arima": MIN_MONTHS_FOR_ARIMA,
            "forecast_months": FORECAST_MONTHS,
            **params  # Unpack the model parameters
        })
        
        # Log tags
        mlflow.set_tags({**owner_tags, "owner": owner})
        
        # Log model and metrics based on model type
        if "ARIMA" in model_type:
            # For ARIMA models
            artifact_path = "arima_model"
            mlflow.statsmodels.log_model(model_fit, artifact_path)
            
            # Log metrics
            aic = model_fit.aic if hasattr(model_fit, 'aic') else None
            bic = model_fit.bic if hasattr(model_fit, 'bic') else None
            if aic is not None:
                mlflow.log_metric("AIC", aic)
            if bic is not None:
                mlflow.log_metric("BIC", bic)
            
            # Register the model
            registered_model = register_model(owner, metadata, artifact_path)
            registered_models[owner] = registered_model
            
        else:
            # For Linear Regression models
            artifact_path = "linear_model"
            mlflow.sklearn.log_model(model_fit, artifact_path)
            
            # Log metrics (R-squared for Linear Regression)
            r_squared = linear_results[owner]['r_squared'] if owner in linear_results else None
            if r_squared is not None:
                mlflow.log_metric("R-squared", r_squared)
                mlflow.log_metric("RMSE", np.sqrt(np.mean((linear_results[owner]['values'] - 
                                 model_fit.predict(np.array([((d.year - linear_results[owner]['first_date'].year) * 12 + 
                                 d.month - linear_results[owner]['first_date'].month) 
                                 for d in linear_results[owner]['dates']]).reshape(-1, 1)))**2)))
            
            # Register the model
            registered_model = register_model(owner, metadata, artifact_path)
            registered_models[owner] = registered_model
        
        # Log the forecast data as a CSV artifact
        forecast_data = pd.DataFrame({
            'Month': [d.strftime('%Y-%m') for d in forecast_results[owner]['future_dates']],
            'Forecasted_Value': forecast_results[owner]['forecast']
        })
        
        # Add initial forecast if reconciled
        if is_total_present and owner != "Total" and 'initial_forecast' in forecast_results[owner]:
            forecast_data['Initial_Forecast'] = forecast_results[owner]['initial_forecast']
            forecast_data['Adjustment'] = forecast_results[owner]['forecast'] - forecast_results[owner]['initial_forecast']
            
        forecast_path = f"{owner.replace(' ', '_')}_forecast.csv"
        forecast_data.to_csv(forecast_path, index=False)
        mlflow.log_artifact(forecast_path)
        os.remove(forecast_path)  # Clean up the temporary file
        
        # Create and log a forecast plot
        plt.figure(figsize=FIGSIZE_TIMESERIES)
        owner_data = df[df['Owner'] == owner].sort_values('Date')
        plt.plot(owner_data['Date'], owner_data['Value'], label='Historical Data', marker='o')
        plt.plot(forecast_results[owner]['future_dates'], forecast_results[owner]['forecast'], 
                 label=f'Forecast ({model_type})', color='red', linestyle='--', marker='x')
                 
        # Add initial forecast if reconciled
        if is_total_present and owner != "Total" and 'initial_forecast' in forecast_results[owner]:
            plt.plot(forecast_results[owner]['future_dates'], forecast_results[owner]['initial_forecast'], 
                     label='Initial Forecast', color='green', linestyle=':', marker='+')
        
        plt.title(f'Value Forecast for Owner: {owner}')
        plt.xlabel('Date')
        plt.ylabel('Value')
        plt.grid(True)
        plt.legend()
        plt.tight_layout()
        plot_path = f"{owner.replace(' ', '_')}_forecast_plot.png"
        plt.savefig(plot_path, dpi=300)
        mlflow.log_artifact(plot_path)
        plt.close()
        os.remove(plot_path)  # Clean up the temporary file
        
        # Log reconciliation info if applicable
        if is_total_present:
            if owner == "Total":
                # Log total's sum check
                reconciliation_sum = np.zeros(FORECAST_MONTHS)
                for other_owner in other_owners:
                    reconciliation_sum += forecast_results[other_owner]['forecast']
                
                reconciliation_error = forecast_results["Total"]['forecast'] - reconciliation_sum
                mlflow.log_metric("max_reconciliation_error", float(np.max(np.abs(reconciliation_error))))
                mlflow.log_metric("mean_reconciliation_error", float(np.mean(np.abs(reconciliation_error))))
            elif 'initial_forecast' in forecast_results[owner]:
                # Log adjustment metrics for individual owners
                initial = forecast_results[owner]['initial_forecast']
                reconciled = forecast_results[owner]['forecast']
                adjustment = reconciled - initial
                mlflow.log_metric("mean_adjustment", float(np.mean(adjustment)))
                mlflow.log_metric("max_adjustment", float(np.max(np.abs(adjustment))))
                mlflow.log_metric("pct_adjustment", float(np.mean(np.abs(adjustment) / np.abs(initial)) * 100))
        
        print(f"Completed MLflow run for owner: {owner}")

# Display registered models summary
print("\nRegistered Models Summary:")
registered_models_df = pd.DataFrame([
    {
        "Owner": owner,
        "Model Name": f"{model_prefix}{owner.replace(' ', '_').lower()}",
        "Model Type": model_metadata[owner]['model_type'],
        "Version": registered_model.version if registered_model else "Registration Failed",
        "Stage": model_stage
    }
    for owner, registered_model in registered_models.items()
])
display(registered_models_df)

# Instructions for loading models from MLflow
print("\nTo load a specific model from MLflow, use the following code:")
print("```python")
print("# For ARIMA models")
print("import mlflow.statsmodels")
print("loaded_model = mlflow.statsmodels.load_model('runs:/<run_id>/arima_model')")
print("")
print("# For Linear Regression models")
print("import mlflow.sklearn")
print("loaded_model = mlflow.sklearn.load_model('runs:/<run_id>/linear_model')")
print("```")
